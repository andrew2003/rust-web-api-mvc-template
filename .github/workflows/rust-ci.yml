name: Rust CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  cargo-check:
    name: Cargo check code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: arduino/setup-protoc@v3
      - uses: actions-rs/cargo@v1
        with:
          command: check
  format-check:
    name: Check format code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 123456
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U user"
          --health-interval=10s
          --health-timeout=30s
          --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - uses: arduino/setup-protoc@v3
      - name: Build
        run: cargo build --verbose
      - name: Run tests
        run: cargo test --verbose
        
  deploy-docker-image:
    name: Deploy docker image to docker hub
    env:
      DOCKER_HUB_REPO: andrewtran2801/rust-api-service
    runs-on: ubuntu-latest
    needs: [cargo-check, format-check, test]
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push docker image
        run: |
          docker build . --tag ${{ env.DOCKER_HUB_REPO }}:latest
          docker push ${{ env.DOCKER_HUB_REPO }}:latest
